@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.ScrimMatchReports;
@using squittal.ScrimPlanetmans.Services.ScrimMatchReports;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using System.Threading;

@inject IScrimMatchReportDataService ReportDataService
@inject NavigationManager NavManager

@implements IDisposable

@if (!string.IsNullOrWhiteSpace(_renderedPlayerId))
{
    @if (_hasLoadedKillfeed && !_isLoadingDeaths)
    {
        <h5 style="color: var(--sq-ov-ps2-primary-dark);">
            Killfeed
            <button class="btn btn-link" style="font-size: 0.8rem; padding: 0; margin-top: 0; border: none; line-height: 1.5rem;" @onclick="OnToggleShowKillfeed">
                @((_showKillfeed ? "Hide" : "Show"))
            </button>
        </h5>
    }
    else
    {
        <h5 style="color: var(--sq-ov-ps2-primary-dark);">
            Killfeed
        </h5>
    }
}
else
{
    <h4>Killfeed</h4>
}

@if (!_hasLoadedKillfeed && !_isLoadingDeaths)
{
    <button class="btn btn-outline-primary" @onclick="OnLoadKillsSubmit" style="font-size: 1.1rem; font-family: Roboto, 'Segoe UI', sans-serif; display: block; margin: 0 auto 12px auto;">
        <span class="oi oi-data-transfer-download" style="font-size: 0.9rem;"></span>Load Kills
    </button>
}
else if (_isLoadingDeaths)
{
    <SpinnerEllipsis />

    <button class="btn btn-outline-primary" @onclick="OnCancelLoadKillsSubmit" style="font-size: 1.1rem; font-family: Roboto, 'Segoe UI', sans-serif; display: block; margin: 0 auto 16px auto;">
        <span class="oi oi-x" style="top: 0px; font-size: 0.9rem;"></span>Cancel
    </button>
}
else if (_showKillfeed && (_deaths == null || !_deaths.Any() ))
{
    <p style="font-style: italic;">No kill data available for this match</p>
}
else if (_showKillfeed)
{

    <div style="max-height: @((string.IsNullOrWhiteSpace(_renderedPlayerId) ? "620px" : "300px")); overflow-y: auto; width: 100%; border-top: 1px solid var(--sq-light-blue-gray); border-bottom: 1px solid var(--sq-light-blue-gray); margin-bottom: 10px;">
        <table class="report-killfeed">
            <tbody>
                @foreach (var death in _deaths)
                {
                    <tr class="@GetDeathRowBgClass(death.DeathType) @GetDeathRowPrimaryClass(death)" style="color: var(--sq-ps2-primary-dark);">
                        <td class="team-fill"></td>
                        @*<td title="Round @death.ScrimMatchRound" style="text-align: right; padding-left: 8px;">@death.ScrimMatchRound</td>*@
                        <td title="Round @death.ScrimMatchRound" class="round-number">@death.ScrimMatchRound</td>
                        @if (!string.IsNullOrWhiteSpace(_renderedPlayerId))
                        {
                            @*<td style="text-align: right; width: 100px;">@death.Timestamp.ToLongTimeString()</td>*@
                            <td class="timestamp">@death.Timestamp.ToLongTimeString()</td>
                        }
                        else
                        {
                            @*<td style="text-align: right; width: 110px;">*@
                            <td class="timestamp time-difference">
                                <div style="display: inline-block; width: 86px;">@death.Timestamp.ToLongTimeString()</div>
                                <div class="sq-text-muted" style="display: inline-block; width: 24px; margin-right: 4px;" title="Seconds from previous death event">@((death.SecondsFromPreviousDeathEvent != null ? $"{((int)death.SecondsFromPreviousDeathEvent).ToString()}s" : string.Empty))</div>
                            </td>
                        }
                        <td class="points" style="text-align: right;">@GetPointsDisplay(death.Points)</td>
                        <td>
                            <div class="playerLoadoutIcon ps2-icon @GetLoadoutIconFromLoadoutId(death.AttackerLoadoutId)" style="filter: @GetLoadoutIconFilterStyle(death.AttackerFactionId)"></div>
                        </td>
                        <td title="@death.AttackerNameDisplay [@death.AttackerCharacterId]" class="player">@death.AttackerNameDisplay</td>
                        @if (_anyHeadshotDeaths)
                        {
                            <td style="width: 20px;">
                                @if (death.IsHeadshot == 1)
                                {
                                    <div class="ps2-icon headshot @SqCssHelper.GetFactionClassFromId(death.AttackerFactionId)" title="Headshot" style="filter: @GetLoadoutIconFilterStyle(death.AttackerFactionId)"></div>
                                }
                            </td>
                        }
                        <td title="@death.WeaponName [@death.WeaponId]" class="weapon">@death.WeaponName</td>
                        <td>
                            <div class="playerLoadoutIcon ps2-icon @GetLoadoutIconFromLoadoutId(death.VictimLoadoutId)" style="filter: @GetLoadoutIconFilterStyle(death.VictimFactionId)"></div>
                        </td>
                        <td title="@death.VictimNameDisplay [@death.VictimCharacterId]" class="@SqCssHelper.GetFactionClassFromId(death.VictimFactionId) player">@death.VictimNameDisplay</td>
                        
                        @if (_anyDamageDeaths)
                        {
                            <td style="width: 20px;">
                                @if (death.DamageAssists > 0)
                                {
                                    <span title="Damage Assisted">💢</span>
                                }
                            </td>
                        }
                        @if (_anyConcussionDeaths)
                        {
                            <td style="width: 20px;">
                                @if (death.ConcussionGrenadeAssists > 0)
                                {
                                    <span title="Concussion Grenade Assisted">💫</span>
                                }
                            </td>
                        }
                        @if (_anyEmpDeaths)
                        {
                            <td style="width: 20px;">
                                @if (death.EmpGrenadeAssists > 0)
                                {
                                    <span title="EMP Grenade Assisted">⚡</span>
                                }
                            </td>
                        }
                        @if (_anyFlashDeaths)
                        {
                            <td style="width: 20px;">
                                @if (death.FlashGrenadeAssists > 0)
                                {
                                    <span title="Flashbang Grenade Assisted">🕶</span>
                                }
                            </td>
                        }
                        @if (_anySpotDeaths)
                        {
                            <td style="width: 20px;">
                                @if (death.SpotAssists > 0)
                                {
                                    <span title="Spot Assisted">👁</span>
                                }
                            </td>
                        }
                        @if (_anyTrickleDeaths)
                        {
                            <td style="width: 20px;">
                                @if (death.IsTrickleDeath && (string.IsNullOrWhiteSpace(_renderedPlayerId) || _renderedPlayerId == death.VictimCharacterId))
                                {
                                <span title="@GetTrickleDeathHoverText(death)">💧</span>
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    [Parameter]
    public string i_scrimMatchId { get; set; }
    private string _renderedScrimMatchId { get; set; }

    [Parameter]
    public string i_playerId { get; set; }
    private string _renderedPlayerId { get; set; }

    private List<ScrimMatchReportInfantryDeath> _deaths { get; set; }

    private bool _hasLoadedKillfeed { get; set; } = false;

    private bool _isChangingScrimMatch { get; set; } = false;
    private bool _isLoadingDeaths { get; set; } = false;

    private bool _showKillfeed { get; set; } = true;

    private int[] infiltratorIds = { 1, 8, 15 };
    private int[] lightAssaultIds = { 3, 10, 17 };
    private int[] medicIds = { 4, 11, 18 };
    private int[] engineerIds = { 5, 12, 19 };
    private int[] heavyAssaultIds = { 6, 13, 20 };
    private int[] maxIds = { 7, 14, 21 };

    private bool _anyHeadshotDeaths { get; set; } = true;
    private bool _anyDamageDeaths { get; set; } = true;
    private bool _anyConcussionDeaths { get; set; } = true;
    private bool _anyEmpDeaths { get; set; } = true;
    private bool _anyFlashDeaths { get; set; } = true;
    private bool _anySpotDeaths { get; set; } = true;
    private bool _anyTrickleDeaths { get; set; } = true;


    private CancellationTokenSource cts;


    #region Initialization Methods
    protected override void OnInitialized()
    {
        _hasLoadedKillfeed = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _isLoadingDeaths = true;

        if (i_scrimMatchId != null)
        {
            _renderedScrimMatchId = i_scrimMatchId;

            if (!string.IsNullOrWhiteSpace(i_playerId))
            {
                _renderedPlayerId = i_playerId;
            }
            else
            {
                _showKillfeed = true;
            }

            if (_hasLoadedKillfeed)
            {
                await LoadInfantryDeaths();
            }
        }

        _isLoadingDeaths = false;
    }

    public void Dispose()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (i_scrimMatchId != _renderedScrimMatchId || i_playerId != _renderedPlayerId)
        {
            _isChangingScrimMatch = true;
            InvokeAsyncStateHasChanged();

            _renderedScrimMatchId = i_scrimMatchId;

            if (i_playerId != _renderedPlayerId)
            {
                _renderedPlayerId = i_playerId;

                _hasLoadedKillfeed = false;

                if (string.IsNullOrWhiteSpace(_renderedPlayerId))
                {
                    _showKillfeed = true;
                }
            }

            if (_hasLoadedKillfeed)
            {
                await LoadInfantryDeaths();
            }

            paramsChanged = true;
        }

        if (paramsChanged)
        {
            _isChangingScrimMatch = false;
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadInfantryDeaths()
    {
        _isLoadingDeaths = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set cts to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            var deaths = string.IsNullOrWhiteSpace(_renderedPlayerId)
                            ? await ReportDataService.GetHistoricalScrimMatchInfantryDeathsAsync(_renderedScrimMatchId, cts.Token)
                            : await ReportDataService.GetHistoricalScrimMatchInfantryPlayerDeathsAsync(_renderedScrimMatchId, _renderedPlayerId, cts.Token);

            cts.Token.ThrowIfCancellationRequested();

            _deaths = new List<ScrimMatchReportInfantryDeath>();
            if (deaths != null && deaths.Any())
            {
                _deaths.AddRange(deaths);
            }

            _anyHeadshotDeaths = deaths.Any(d => d.IsHeadshot == 1);
            _anyDamageDeaths = deaths.Any(d => d.DamageAssists > 0);
            _anyConcussionDeaths = deaths.Any(d => d.ConcussionGrenadeAssists > 0);
            _anyEmpDeaths = deaths.Any(d => d.EmpGrenadeAssists > 0);
            _anyFlashDeaths = deaths.Any(d => d.FlashGrenadeAssists > 0);
            _anySpotDeaths = deaths.Any(d => d.SpotAssists > 0);
            _anyTrickleDeaths = string.IsNullOrWhiteSpace(_renderedPlayerId) ? deaths.Any(d => d.IsTrickleDeath) : deaths.Any(d => d.IsTrickleDeath && _renderedPlayerId == d.VictimCharacterId);

            _hasLoadedKillfeed = true;
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isLoadingDeaths = false;
    }
    #endregion Initialization Methods

    #region UI & Form Controls
    private async void OnLoadKillsSubmit()
    {
        await LoadInfantryDeaths();

        InvokeAsyncStateHasChanged();
    }

    private void OnCancelLoadKillsSubmit()
    {
        _isLoadingDeaths = false;
        _hasLoadedKillfeed = false;

        if (cts != null)
        {
            cts.Cancel();
        }

    }

    private void OnToggleShowKillfeed()
    {
        _showKillfeed = !_showKillfeed;
    }
    #endregion UI & Form Controls

    private string GetHeadshotClass(bool? isHeadshot)
    {
        if (isHeadshot == null)
        {
            return string.Empty;
        }
        else
        {
            return (bool)isHeadshot ? "headshot" : string.Empty;

        }
    }

    private string GetPointsDisplay(int points)
    {
        if (points >= 0)
        {
            return $"+{points}";
        }
        else
        {
            return points.ToString();
        }
    }

    private string GetDeathRowBgClass(DeathEventType deathType)
    {
        if (deathType == DeathEventType.Teamkill || deathType == DeathEventType.Suicide)
        {
            return "teamkill";
        }
        else
        {
            return "";
        }
    }

    private string GetDeathRowPrimaryClass(ScrimMatchReportInfantryDeath death)
    {
        switch (death.DeathType)
        {
            case DeathEventType.Kill:
                return SqCssHelper.GetFactionClassFromId(death.AttackerFactionId);

            case DeathEventType.Suicide:
                return SqCssHelper.GetFactionClassFromId(death.VictimFactionId);

            case DeathEventType.Teamkill:
                return SqCssHelper.GetFactionClassFromId(death.AttackerFactionId);

            default:
                return SqCssHelper.GetFactionClassFromId(death.AttackerFactionId);
        }
    }


    private string GetLoadoutIconFromLoadoutId(int loadoutId)
    {
        if (infiltratorIds.Contains(loadoutId))
        {
            return "infil";
        }
        else if (lightAssaultIds.Contains(loadoutId))
        {
            return "la";
        }
        else if (medicIds.Contains(loadoutId))
        {
            return "medic";
        }
        else if (engineerIds.Contains(loadoutId))
        {
            return "engy";
        }
        else if (heavyAssaultIds.Contains(loadoutId))
        {
            return "heavy";
        }
        else if (maxIds.Contains(loadoutId))
        {
            return "max";
        }
        else
        {
            return "unknown";
        }
    }

    private string GetLoadoutIconFilterStyle(int factionId)
    {
        if (factionId == 1)
        {
            return "brightness(0) saturate(100%) invert(39%) sepia(41%) saturate(1794%) hue-rotate(224deg) brightness(98%) contrast(91%);";
        }
        if (factionId == 2)
        {
            return "brightness(0) saturate(100%) invert(49%) sepia(57%) saturate(1428%) hue-rotate(184deg) brightness(101%) contrast(98%);";
        }
        if (factionId == 3)
        {
            return "brightness(0) saturate(100%) invert(50%) sepia(34%) saturate(1466%) hue-rotate(307deg) brightness(98%) contrast(88%);";
        }

        return string.Empty;
    }

    private string GetTrickleDeathHoverText(ScrimMatchReportInfantryDeath death)
    {
        var nextString = death.SecondsToNextDeathEvent != null ? ((int)death.SecondsToNextDeathEvent).ToString() : string.Empty;
        var prevString = death.SecondsFromPreviousDeathEvent != null ? ((int)death.SecondsFromPreviousDeathEvent).ToString() : string.Empty;

        return $"Trickle Death\nNext Event: +{nextString} seconds\nPrev. Event: -{prevString} seconds";
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
