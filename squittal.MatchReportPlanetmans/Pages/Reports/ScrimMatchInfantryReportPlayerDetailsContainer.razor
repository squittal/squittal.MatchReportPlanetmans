@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.Models.ScrimMatchReports;
@using squittal.ScrimPlanetmans.Services.ScrimMatchReports;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using System.Threading;

@inject IScrimMatchReportDataService ReportDataService
@inject NavigationManager NavManager

@implements IDisposable


@if (_isLoadingStats)
{
    <h5 style="color: var(--sq-ov-ps2-primary-dark);">Head-To-Head</h5>
    
    <SpinnerEllipsis />
}
else if (_headToHeadStats == null || !_headToHeadStats.Any())
{
    <div style="display: grid; grid-template-columns: 1fr 30px; align-items: baseline; font-family: Roboto, 'Segoe UI', sans-serif;">
        <h4>Player Drilldown</h4>
    </div>

    <h5 style="color: var(--sq-ov-ps2-primary-dark);">Head-To-Head</h5>

    <p style="font-style: italic;">No player head-to-head data available for this match & player</p>
}
else
{
    <div style="display: grid; grid-template-columns: 1fr 30px; align-items: baseline; font-family: Roboto, 'Segoe UI', sans-serif;">
        <h4>
            <span class="playerLoadoutIcon ps2-icon @GetLoadoutIconFromLoadoutId(_opponentClassMap[_renderedPlayerId])" style="display: inline-block; height: 24px; width: 24px; position: relative; top: 3px; filter: @GetLoadoutIconFilterStyle(_headToHeadStats.Select(e => e.PlayerFactionId).FirstOrDefault())"></span> @_headToHeadStats.Select(e => e.PlayerNameDisplay).FirstOrDefault()
            <span style="line-height: 1rem; color: var(--sq-gray); font-weight: 300; font-size: 0.9rem; padding-left: 4px;">
                [@_headToHeadStats.Select(e => e.PlayerCharacterId).FirstOrDefault()]
            </span>
        </h4>

        <NavLink class="nav-link icon black" href=@($"ScrimMatch/{_renderedScrimMatchId}") style="text-align: right;" title="Close player details">
            <span class="oi oi-x" style="top: 0;"></span>
        </NavLink>

    </div>

    @if (!_showHeadToHeadTable)
    {
        <h5 style="color: var(--sq-ov-ps2-primary-dark);">
            Head-To-Head
            <button class="btn btn-link" style="font-size: 0.8rem; padding: 0; margin-top: 0; border: none; line-height: 1.5rem;" @onclick="OnToggleShowHeadToHeadTable">
                Show
            </button>
        </h5>
    }
    else
    {
        <h5 style="color: var(--sq-ov-ps2-primary-dark);">
            Head-To-Head
            <button class="btn btn-link" style="font-size: 0.8rem; padding: 0; margin-top: 0; border: none; line-height: 1.5rem;" @onclick="OnToggleShowHeadToHeadTable">
                Hide
            </button>
        </h5>

        <div style="max-height: 620px; overflow-y: auto; width: 100%; margin-bottom: 10px;">
            <table style="width: 100%; text-align: right; margin-bottom: 10px;" class="table-responsive-sm table-striped-light">

                <tbody style="font-size: 0.8rem;">

                    <tr class="@SqCssHelper.GetFactionClassFromId(_headToHeadStats.Select(e => e.PlayerFactionId).FirstOrDefault())" style="line-height: 1.2; font-size: 0.85rem; border-bottom: 2px solid var(--sq-ps2-primary-light); vertical-align: bottom; background-color: transparent; font-family: Roboto, 'Segoe UI', sans-serif;">
                        <th style="padding-left: 10px; "></th>
                        <th style="padding-bottom: 0.2rem;"></th>
                        <th style="text-align: right; font-weight: 300; width: 40px; padding-bottom: 0.2rem;" title="Total Points">Pts.</th>
                        <th style="font-weight: 300; width: 60px; padding-bottom: 0.2rem;" title="Net Score">Net</th>
                        <th style="font-weight: 300; width: 50px; padding-bottom: 0.2rem;" title="Kills">Kills</th>
                        <th style="font-weight: 300; width: 50px; padding-bottom: 0.2rem;" title="Deaths">Deaths</th>
                        <th style="font-weight: 300; width: 50px; padding-bottom: 0.2rem;" title="Solo/Unassisted Kills (including spot-assisted-only kills)">Solo Kills</th>
                        <th style="font-weight: 300; width: 70px; max-width: 60px; padding-bottom: 0.2rem;" title="Assisted Deaths (excluding spot-assisted-only deaths)">Asst. Deaths</th>
                        <th style="font-weight: 300; width: 60px;  min-width: 50px; padding-bottom: 0.2rem;" title="Favorable Engagement Percent">Fav. Eng. %</th>
                        <th style="font-weight: 300; width: 60px; min-width: 50px; padding-bottom: 0.2rem;" title="One vs One Engagement Percent">1v1 Eng. %</th>
                        <th style="font-weight: 300; width: 60px; padding-bottom: 0.2rem;" title="One vs One Kill-Death Ratio">1v1 KDR</th>
                    </tr>

                    @foreach (var opponentStats in _headToHeadStats)
                    {
                        <tr class="@SqCssHelper.GetFactionClassFromId(opponentStats.OpponentFactionId)" style="color: var(--sq-ov-ps2-primary-dark);">
                            <td>
                                <div class="playerLoadoutIcon ps2-icon @GetLoadoutIconFromLoadoutId(_opponentClassMap[opponentStats.OpponentCharacterId])" style="filter: @GetLoadoutIconFilterStyle(opponentStats.OpponentFactionId); margin-top: 0;"></div>
                            </td>
                            <td style="color: var(--sq-ps2-primary);text-align: left;" title="@opponentStats.OpponentNameFull [@(opponentStats.OpponentCharacterId)]">

                                <NavLink class="nav-link" href=@($"ScrimMatch/{_renderedScrimMatchId}/{opponentStats.OpponentNameFull}")>
                                    <span style="text-overflow: ellipsis; overflow: hidden; max-width: 200px;">@opponentStats.OpponentNameDisplay</span>
                                    @if (opponentStats.OpponentPrestigeLevel != 0)
                                    {
                                        <div style="display: inline-block; margin-left: -4px;" title="ASP Active">
                                            <sup>
                                                <span class="oi oi-star small" aria-hidden="true"></span>
                                            </sup>
                                        </div>
                                    }
                                </NavLink>
                            </td>
                            <td style="text-align: right;">@opponentStats.Points</td>
                            <td>
                                <div class="net stats-value" style="margin-top: -0.2rem;">
                                    <span class="value">@opponentStats.NetScore</span><span class="net-score-icon @GetNetScoreLabelCssClass(opponentStats.NetScore)">@GetNetScoreLabelText(opponentStats.NetScore)</span>
                                </div>
                            </td>
                            <td style="opacity: @GetStatOpacity(@opponentStats.Kills);">@opponentStats.Kills</td>
                            <td style="opacity: @GetStatOpacity(@opponentStats.Deaths);">@opponentStats.Deaths</td>
                            <td style="opacity: @GetStatOpacity(@opponentStats.UnassistedKills);">@opponentStats.UnassistedKills</td>
                            <td style="opacity: @GetStatOpacity(@opponentStats.AssistedDeaths);">@opponentStats.AssistedDeaths</td>
                            <td title="@opponentStats.FavorableEngagementCount / @opponentStats.WeightedEngagementCount">@opponentStats.WeightedFavorableEngagementPercent<span style="font-size: smaller; padding-left: 1px;">%</span></td>
                            <td title="@opponentStats.OneVsOneCount / @opponentStats.KillDeathEngagementCount">@opponentStats.OneVsOneEngagementPercent<span style="font-size: smaller; padding-left: 1px;">%</span></td>
                            <td title="@opponentStats.UnassistedKills / @opponentStats.UnassistedDeaths">@opponentStats.OneVsOneKillDeathRatio</td>
                        </tr>
                    }

                    <tr class="@SqCssHelper.GetFactionClassFromId(_headToHeadStats.Select(e => e.PlayerFactionId).FirstOrDefault())" style="background-color: transparent; border-bottom: 1px solid var(--sq-ps2-primary-light);"></tr>

                </tbody>
            </table>

        </div>

    }
}

@code {
    [Parameter]
    public string i_scrimMatchId { get; set; }
    private string _renderedScrimMatchId { get; set; }

    [Parameter]
    public string i_playerId { get; set; }
    public string _renderedPlayerId { get; set; }

    private List<ScrimMatchReportInfantryPlayerHeadToHeadStats> _headToHeadStats { get; set; }

    private Dictionary<string, PlanetsideClass> _opponentClassMap { get; set; }

    private bool _isChangingScrimMatch { get; set; } = false;
    private bool _isLoadingStats { get; set; } = false;

    private bool _showHeadToHeadTable { get; set; } = true;

    private CancellationTokenSource cts;


    #region Initialization Methods
    public void Dispose()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var paramsChanged = false;

        if (i_scrimMatchId != _renderedScrimMatchId || i_playerId != _renderedPlayerId)
        {
            _isChangingScrimMatch = true;
            InvokeAsyncStateHasChanged();

            _renderedScrimMatchId = i_scrimMatchId;
            _renderedPlayerId = i_playerId;

            await LoadPlayerHeadToHeadStats();

            paramsChanged = true;
        }

        if (paramsChanged)
        {
            _isChangingScrimMatch = false;
            InvokeAsyncStateHasChanged();
        }
    }

    private async Task LoadPlayerHeadToHeadStats()
    {
        _isLoadingStats = true;
        InvokeAsyncStateHasChanged();

        // If a process is already underway, cancel it
        if (cts != null)
        {
            cts.Cancel();
        }

        // Set cts to cancel the current process if another table refresh is requested
        CancellationTokenSource newCTS = new CancellationTokenSource();
        cts = newCTS;

        try
        {
            var headToHeadStats = await ReportDataService.GetHistoricalScrimMatchInfantryPlayerHeadToHeadStatsAsync(_renderedScrimMatchId, _renderedPlayerId, cts.Token);

            var classCounts = await ReportDataService.GetHistoricalScrimMatchInfantryPlayeClassEventCountsAsync(_renderedScrimMatchId, cts.Token);

            cts.Token.ThrowIfCancellationRequested();

            _headToHeadStats = new List<ScrimMatchReportInfantryPlayerHeadToHeadStats>();

            if (headToHeadStats != null && headToHeadStats.Any())
            {
                _headToHeadStats.AddRange(headToHeadStats);
            }

            _opponentClassMap = classCounts.ToDictionary(e => e.CharacterId, e => e.PrimaryPlanetsideClass);
        }
        catch
        {
            // Ignore
        }

        // When the process is complete, signal that another process can proceed
        if (cts == newCTS)
        {
            cts = null;
        }

        _isLoadingStats = false;
    }
    #endregion Initialization Methods

    #region UI & Form Controls
    private void OnToggleShowHeadToHeadTable()
    {
        _showHeadToHeadTable = !_showHeadToHeadTable;
    }
    #endregion UI & Form Controls

    private string GetHeadshotClass(bool? isHeadshot)
    {
        if (isHeadshot == null)
        {
            return string.Empty;
        }
        else
        {
            return (bool)isHeadshot ? "headshot" : string.Empty;

        }
    }

    private string GetPointsDisplay(int points)
    {
        if (points >= 0)
        {
            return $"+{points}";
        }
        else
        {
            return points.ToString();
        }
    }

    private string GetNetScoreLabelCssClass(int netScore)
    {
        if (netScore == 0)
        {
            return "neutral";
        }
        else if (netScore < 0)
        {
            return "negative";
        }
        else
        {
            return string.Empty;
        }
    }

    private string GetNetScoreLabelText(int netScore)
    {
        if (netScore == 0)
        {
            return "•";
        }
        else
        {
            return "Δ";
        }
    }

    private string GetDeathRowBgClass(DeathEventType deathType)
    {
        if (deathType == DeathEventType.Teamkill || deathType == DeathEventType.Suicide)
        {
            return "teamkill";
        }
        else
        {
            return "";
        }
    }

    private string GetLoadoutIconFromLoadoutId(PlanetsideClass planetsideClass)
    {
        if (planetsideClass == PlanetsideClass.Infiltrator)
        {
            return "infil";
        }
        else if (planetsideClass == PlanetsideClass.LightAssault)
        {
            return "la";
        }
        else if (planetsideClass == PlanetsideClass.Medic)
        {
            return "medic";
        }
        else if (planetsideClass == PlanetsideClass.Engineer)
        {
            return "engy";
        }
        else if (planetsideClass == PlanetsideClass.HeavyAssault)
        {
            return "heavy";
        }
        else if (planetsideClass == PlanetsideClass.MAX)
        {
            return "max";
        }
        else
        {
            return "unknown";
        }
    }

    private string GetLoadoutIconFilterStyle(int factionId)
    {
        if (factionId == 1)
        {
            return "brightness(0) saturate(100%) invert(39%) sepia(41%) saturate(1794%) hue-rotate(224deg) brightness(98%) contrast(91%);";
        }
        if (factionId == 2)
        {
            return "brightness(0) saturate(100%) invert(49%) sepia(57%) saturate(1428%) hue-rotate(184deg) brightness(101%) contrast(98%);";
        }
        if (factionId == 3)
        {
            return "brightness(0) saturate(100%) invert(50%) sepia(34%) saturate(1466%) hue-rotate(307deg) brightness(98%) contrast(88%);";
        }

        return string.Empty;
    }

    private double GetStatOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }

    private void InvokeAsyncStateHasChanged()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
